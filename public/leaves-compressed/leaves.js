// Generated by CoffeeScript 1.6.1
var DocManager, JsonDoc, PathProxy, TimeView;

window.Leaves || (window.Leaves = {});

Leaves.root_domain = "http://scratch.leaves.io";

Leaves.create = function(data_item) {
  return $.ajax(Leaves.root_domain + "/json-doc", {
    data: JSON.stringify(data_item || {}),
    contentType: "text/plain",
    type: "POST"
  });
};

Leaves.add = function(wl_id, path, data_item) {
  return $.ajax(Leaves.root_domain + ("/json-doc/" + wl_id + "/addable/data-path/" + (path.join('/'))), {
    data: JSON.stringify(data_item),
    contentType: "text/plain",
    type: "POST"
  });
};

Leaves.assoc = function(wl_id, path, data_item) {
  return $.ajax(Leaves.root_domain + ("/json-doc/" + wl_id + "/settable/data-path/" + (path.join('/'))), {
    data: JSON.stringify(data_item),
    contentType: "text/plain",
    type: "POST"
  });
};

Leaves.move = function(wl_id, path, new_key) {
  return $.ajax(Leaves.root_domain + ("/json-doc/" + wl_id + "/movable/data-path/" + (path.join('/'))), {
    data: JSON.stringify(new_key),
    contentType: "text/plain",
    type: "POST"
  });
};

Leaves.remove = function(wl_id, path) {
  return $.ajax(Leaves.root_domain + ("/json-doc/" + wl_id + "/deletable/data-path/" + (path.join('/'))), {
    contentType: "text/plain",
    type: "DELETE"
  });
};

Leaves.get = function(wl_id) {
  return $.ajax(Leaves.root_domain + ("/json-doc/" + wl_id), {
    type: 'GET'
  });
};

Leaves.get_with_data = function(wl_id) {
  return $.ajax(Leaves.root_domain + ("/json-doc/" + wl_id + "?with_data=true"), {
    type: 'GET'
  });
};

Leaves.get_data_path = function(wl_id) {
  return $.ajax(Leaves.root_domain + ("/json-doc/" + wl_id + "/data-path/" + (path.join('/'))), {
    type: 'GET'
  });
};

Leaves.get_as_of = function(wl_id, timestamp) {
  return $.ajax(Leaves.root_domain + ("/json-doc/" + wl_id + "/time-traveler/as-of/" + timestamp), {
    type: 'GET'
  });
};

Leaves.get_since = function(wl_id, timestamp) {
  return $.ajax(Leaves.root_domain + ("/json-doc/" + wl_id + "/time-traveler/since/" + timestamp), {
    type: 'GET'
  });
};

Leaves.do_action = function(wl_id, action) {
  var args;
  args = action.args.slice(0);
  args.unshift(wl_id);
  return Leaves[action.verb].apply(Leaves, args);
};

Leaves.opt_action = function(value, action) {
  var args;
  args = action.args.slice(0);
  args.unshift(Leaves.JsonOp.deep_clone(value));
  return Leaves.JsonOp["" + action.verb + "_node"].apply(Leaves, args);
};

Leaves.log = function(wl) {
  return console.log(wl.data);
};

window.Leaves.JsonDoc = JsonDoc = (function() {

  function JsonDoc(options) {
    var _this = this;
    if (options == null) {
      options = {};
    }
    if (options.webmap_id != null) {
      this.request = Leaves.get_with_data(options.webmap_id);
    } else if (options.initial_data != null) {
      this.request = Leaves.create(options.initial_data);
    } else if (options.action == null) {
      this.request = Leaves.create([]);
    } else {
      this.action = options.action;
      this.previous = options.previous;
      this.request = this.previous.request.pipe(function(wl) {
        return Leaves.do_action(wl._id, _this.action);
      });
    }
    this.request.done(function(wl) {
      return _this.wl = wl;
    });
  }

  JsonDoc.prototype._get_keys = function(keys) {
    if (keys instanceof Array) {
      return keys;
    } else {
      return [keys];
    }
  };

  JsonDoc.prototype.set = function(key, data_item) {
    return Leaves.JsonDoc.from_action({
      verb: "assoc",
      args: [this._get_keys(key), data_item]
    }, this);
  };

  JsonDoc.prototype["delete"] = function(key) {
    return Leaves.JsonDoc.from_action({
      verb: "remove",
      args: [this._get_keys(key)]
    }, this);
  };

  JsonDoc.prototype.add = function(data_item) {
    return this.insert_at(-1, data_item);
  };

  JsonDoc.prototype.insert_at = function(key, data_item) {
    return Leaves.JsonDoc.from_action({
      verb: "add",
      args: [this._get_keys(key), data_item]
    }, this);
  };

  JsonDoc.prototype.move_to = function(key, new_key) {
    return Leaves.JsonDoc.from_action({
      verb: "move",
      args: [this._get_keys(key), new_key]
    }, this);
  };

  JsonDoc.prototype.get = function(key) {
    return Leaves.JsonOp.deep_clone(this.wl != null ? this.wl.data[key] : this.opt_value()[key]);
  };

  JsonDoc.prototype.opt_value = function() {
    if (this.action == null) {
      return (this.wl && (this.wl.data != null) && this.wl.data) || [];
    } else {
      return Leaves.opt_action(this.previous.opt_value(), this.action);
    }
  };

  JsonDoc.prototype.value = function(func) {
    return this.request.done(func);
  };

  JsonDoc.prototype.rejected = function() {
    return this.request.state() === "rejected";
  };

  JsonDoc.prototype.completed = function() {
    return this.request.state() === "resolved";
  };

  JsonDoc.prototype.rejected_in_chain = function() {
    if (this.action == null) {
      return false;
    } else if (this.completed()) {
      return false;
    } else {
      return this.rejected() || this.previous.rejected_in_chain();
    }
  };

  JsonDoc.prototype.last_not_rejected = function() {
    if (!this.rejected_in_chain()) {
      return this;
    } else {
      return this.previous.last_not_rejected();
    }
  };

  return JsonDoc;

})();

window.Leaves.JsonDoc.from_identifier = function(webmap_id) {
  return new JsonDoc({
    webmap_id: webmap_id
  });
};

window.Leaves.JsonDoc.from_data = function(data) {
  return new JsonDoc({
    initial_data: data
  });
};

window.Leaves.JsonDoc.from_action = function(action, previous) {
  return new JsonDoc({
    action: action,
    previous: previous
  });
};

window.Leaves.DocManager = DocManager = (function() {

  function DocManager(options) {
    var _this = this;
    if (options == null) {
      options = {};
    }
    this.next_pointer_cache = {};
    this.change_listeners = [];
    this.opt_change_listeners = [];
    this.lpointer = new JsonDoc(options);
    this.lpointer.request.done(function(wl) {
      return _this._trigger_change(wl);
    });
  }

  DocManager.prototype.add = function(data_item) {
    return this._swap_pointer(this.lpointer.add(data_item)) && this;
  };

  DocManager.prototype.set = function(key, data_item) {
    return this._swap_pointer(this.lpointer.set(key, data_item)) && this;
  };

  DocManager.prototype["delete"] = function(key) {
    return this._swap_pointer(this.lpointer["delete"](key)) && this;
  };

  DocManager.prototype.insert_at = function(key, data_item) {
    return this._swap_pointer(this.lpointer.insert_at(key, data_item)) && this;
  };

  DocManager.prototype.move_to = function(key, new_key) {
    return this._swap_pointer(this.lpointer.move_to(key, new_key)) && this;
  };

  DocManager.prototype.get = function(key) {
    return this.lpointer.get(key);
  };

  DocManager.prototype.opt_value = function() {
    return this.lpointer.opt_value();
  };

  DocManager.prototype.value = function(func) {
    return this.lpointer.value(func);
  };

  DocManager.prototype.path = function(path_array) {
    return new Leaves.PathProxy(path_array, this);
  };

  DocManager.prototype.undo = function() {
    var ref,
      _this = this;
    if (this.lpointer.previous != null) {
      this.next_pointer_cache[this.lpointer.previous.wl._id] = this.lpointer;
      return this._swap_pointer(this.lpointer.previous);
    } else if (this.lpointer.wl["parent-id"] != null) {
      ref = new JsonDoc({
        webmap_id: this.lpointer.wl["parent-id"]
      });
      return ref.request.done(function() {
        _this.next_pointer_cache[ref.wl._id] = _this.lpointer;
        return _this._swap_pointer(ref);
      });
    }
  };

  DocManager.prototype.redo = function() {
    var next;
    next = this.next_pointer_cache[this.lpointer.wl._id];
    if (next != null) {
      return this._swap_pointer(next);
    }
  };

  DocManager.prototype.changed = function(func) {
    return this.change_listeners.push(func);
  };

  DocManager.prototype.optimistic_changed = function(func) {
    return this.opt_change_listeners.push(func);
  };

  DocManager.prototype._swap_pointer = function(next_lpointer) {
    var _this = this;
    this._trigger_opt_change(next_lpointer.opt_value());
    next_lpointer.request.done(function(wl) {
      return _this._trigger_change(wl);
    });
    next_lpointer.request.fail(function(wl) {
      if (_this.lpointer.rejected_in_chain()) {
        return _this._swap_pointer(_this.lpointer.last_not_rejected());
      }
    });
    return this.lpointer = next_lpointer;
  };

  DocManager.prototype._trigger_change = function(wl) {
    var l, _i, _len, _ref, _results;
    _ref = this.change_listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      _results.push(l(wl.data, wl));
    }
    return _results;
  };

  DocManager.prototype._trigger_opt_change = function(val) {
    var l, _i, _len, _ref, _results;
    _ref = this.opt_change_listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      _results.push(l(val));
    }
    return _results;
  };

  return DocManager;

})();

window.Leaves.DocManager.from_identifier = function(webmap_id) {
  return new DocManager({
    webmap_id: webmap_id
  });
};

window.Leaves.DocManager.from_data = function(data) {
  return new DocManager({
    initial_data: data
  });
};

window.Leaves.DocManager.from_cookie = function(cookie_name, intial_data) {
  var lm, webmap_id;
  webmap_id = Cookies.get(cookie_name);
  lm = webmap_id != null ? Leaves.DocManager.from_identifier(webmap_id) : Leaves.DocManager.from_data(intial_data);
  console.log(lm);
  lm.changed(function(val, wl) {
    return Cookies.set(cookie_name, wl._id, {
      expires: 86400 * 300
    });
  });
  return lm;
};

window.Leaves.PathProxy = PathProxy = (function() {

  function PathProxy() {}

  PathProxy.prototype.contructor = function(path_array, parent) {
    this.parent = parent;
    return this.path = path_array;
  };

  PathProxy.prototype.add = function(data_item) {
    return this.parent.insert_at(this.path.concat([-1]), data_item) && this;
  };

  PathProxy.prototype.set = function(key, data_item) {
    return this.parent.set(this.path.concat([key]), data_item) && this;
  };

  PathProxy.prototype["delete"] = function(key) {
    return this.parent["delete"](this.path.concat([key])) && this;
  };

  PathProxy.prototype.insert_at = function(key, data_item) {
    return this.parent.insert_at(this.path.concat([key]), data_item) && this;
  };

  PathProxy.prototype.move_to = function(key, new_key) {
    return this.parent.move_to(this.path.concat([key]), new_key) && this;
  };

  return PathProxy;

})();

window.Leaves.TimeView = TimeView = (function() {

  function TimeView(wl, timestamp, func_name) {
    if (func_name == null) {
      func_name = "get_as_of";
    }
    this.original_wl = wl;
    this.change_listeners = [];
    this.func_name = func_name;
    this.travel(timestamp);
  }

  TimeView.prototype.changed = function(func) {
    return this.change_listeners.push(func);
  };

  TimeView.prototype._trigger_change = function(wl) {
    var l, _i, _len, _ref, _results;
    _ref = this.change_listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      _results.push(l(wl.data, wl));
    }
    return _results;
  };

  TimeView.prototype.value = function(func) {
    return this.request.done(function(wl) {
      return func(wl.data);
    });
  };

  TimeView.prototype.travel = function(timestamp) {
    var _this = this;
    this.request = Leaves[this.func_name](this.original_wl._id, timestamp);
    return this.request.done(function(wl) {
      return _this._trigger_change(wl);
    });
  };

  return TimeView;

})();

window.Leaves.as_of_view = function(wl, timestamp) {
  return new Leaves.TimeView(wl, timestamp, "get_as_of");
};

window.Leaves.since_view = function(wl, timestamp) {
  return new Leaves.TimeView(wl, timestamp, "get_since");
};
// Generated by CoffeeScript 1.6.1
var _base;

window.Leaves || (window.Leaves = {});

(_base = window.Leaves).JsonOp || (_base.JsonOp = {});

(function(ns) {
  ns.apply_to_node = function(struct, key_chain, func) {
    var current_key;
    current_key = key_chain[0];
    struct = struct || (typeof current_key === "number" ? [] : {});
    if (current_key == null) {
      return func(struct);
    } else {
      struct[current_key] = ns.apply_to_node(struct[current_key], key_chain.slice(1), func);
      return struct;
    }
  };
  ns.insert_into_array = function(arr, key, data) {
    if (key === -1) {
      arr.push(data);
    } else {
      arr.splice(key, 0, data);
    }
    return arr;
  };
  ns.insert_at = function(struct, key, data) {
    if ((struct == null) && typeof key === "number") {
      return ns.insert_at([], key, data);
    } else if (struct == null) {
      return ns.insert_at({}, key, data);
    } else if (struct instanceof Array) {
      return ns.insert_into_array(struct, key, data);
    } else if (typeof struct === "object") {
      struct[key] = data;
      return struct;
    } else {
      throw "must be either array or object or nil";
    }
  };
  ns.remove_from_vec = function(arr, key) {
    return arr.slice(0, key).concat(arr.slice(key + 1));
  };
  ns.remove_at = function(struct, key) {
    if (struct == null) {
      return null;
    } else if (struct instanceof Array) {
      return ns.remove_from_vec(struct, key);
    } else if (typeof struct === "object") {
      delete struct[key];
      return struct;
    } else {
      return struct;
    }
  };
  ns.move_to = function(struct, old_key, new_key) {
    var removed, temp;
    temp = struct[old_key];
    removed = ns.remove_at(struct, old_key);
    return ns.insert_at(removed, new_key, temp);
  };
  ns.assoc_node = function(struct, key_chain, datum) {
    if (key_chain.length === 0) {
      return datum;
    } else {
      return ns.apply_to_node(struct, key_chain.slice(0, -1), function(n) {
        n[key_chain.slice(-1)[0]] = datum;
        return n;
      });
    }
  };
  ns.add_node = function(struct, key_chain, data) {
    return ns.apply_to_node(struct, key_chain.slice(0, -1), function(n) {
      return ns.insert_at(n, key_chain.slice(-1)[0], data);
    });
  };
  ns.remove_node = function(struct, key_chain) {
    return ns.apply_to_node(struct, key_chain.slice(0, -1), function(n) {
      return ns.remove_at(n, key_chain.slice(-1)[0]);
    });
  };
  ns.move_node = function(struct, key_chain, new_key) {
    return ns.apply_to_node(struct, key_chain.slice(0, -1), function(n) {
      return ns.move_to(n, key_chain.slice(-1)[0], new_key);
    });
  };
  return ns.deep_clone = function(obj) {
    return $.extend(true, {}, {
      data: obj
    }).data;
  };
})(Leaves.JsonOp);
// Generated by CoffeeScript 1.6.1
var Entity, LiveEntity;

window.Weblist || (window.Weblist = {});

window.Weblist.EntityRemote = {};

Weblist.EntityPusher = {};

Weblist.EntityPusher.setup = function(pusher_id) {
  return Weblist.EntityPusher.pusher = new Pusher(pusher_id);
};

Weblist.EntityRemote.create = function(data_item) {
  return $.ajax("/entity", {
    data: JSON.stringify(data_item || {}),
    contentType: "application/json",
    type: "POST"
  });
};

Weblist.EntityRemote.create_from_wl_id = function(wl_id) {
  return $.ajax("/entity/from-ref/" + wl_id, {
    contentType: "application/json",
    type: "POST"
  });
};

Weblist.EntityRemote.add = function(e_id, path, data_item) {
  return $.ajax("/entity/" + e_id + "/" + (path.join('/')) + "?op=add", {
    data: JSON.stringify(data_item),
    contentType: "application/json",
    type: "POST"
  });
};

Weblist.EntityRemote.assoc = function(e_id, path, data_item) {
  return $.ajax("/entity/" + e_id + "/" + (path.join('/')), {
    data: JSON.stringify(data_item),
    contentType: "application/json",
    type: "POST"
  });
};

Weblist.EntityRemote.remove = function(e_id, path) {
  return $.ajax("/entity/" + e_id + "/" + (path.join('/')), {
    contentType: "application/json",
    type: "DELETE"
  });
};

Weblist.EntityRemote.move = function(e_id, path, new_key) {
  return $.ajax("/entity/" + e_id + "/" + (path.join('/')) + "?op=move", {
    data: JSON.stringify(new_key),
    contentType: "application/json",
    type: "POST"
  });
};

Weblist.EntityRemote.get = function(e_id) {
  return $.ajax("/entity/" + e_id, {
    type: 'GET'
  });
};

Weblist.EntityRemote.do_action = function(e_id, action) {
  var args;
  args = action.args.slice(0);
  args.unshift(e_id);
  return Weblist.EntityRemote[action.verb].apply(Weblist, args);
};

window.Weblist.Entity = Entity = (function() {

  function Entity(options) {
    var _this = this;
    if (options == null) {
      options = {};
    }
    this.change_listeners = [];
    if (options.entity_id != null) {
      this.ent_id = options.entity_id;
      this.request = Weblist.EntityRemote.get(options.entity_id);
    }
    this.request.done(function(wl) {
      return _this.wl = wl;
    });
  }

  Entity.prototype.add = function(data_item) {
    var _this = this;
    this.request = Weblist.EntityRemote.add(this.ent_id, [-1], data_item);
    return this.request.done(function(wl) {
      return _this._swap_wl(wl);
    });
  };

  Entity.prototype.value = function(func) {
    return this.request.done(func);
  };

  Entity.prototype.changed = function(func) {
    return this.change_listeners.push(func);
  };

  Entity.prototype._trigger_change = function(wl) {
    var l, _i, _len, _ref, _results;
    _ref = this.change_listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      _results.push(l(wl.data, wl));
    }
    return _results;
  };

  Entity.prototype._swap_wl = function(wl) {
    this.wl = wl;
    return this._trigger_change(wl);
  };

  return Entity;

})();

window.Weblist.LiveEntity = LiveEntity = (function() {

  function LiveEntity(options) {
    var _this = this;
    if (options == null) {
      options = {};
    }
    this.change_listeners = [];
    if (options.entity_id != null) {
      this.ent_id = options.entity_id;
      this.request = Weblist.EntityRemote.get(options.entity_id);
    }
    this.request.done(function(wl) {
      return _this.wl = wl;
    });
    this.setup_event_listening();
  }

  LiveEntity.prototype.setup_event_listening = function() {
    var channel, pusher,
      _this = this;
    pusher = Weblist.EntityPusher.pusher;
    channel = pusher.subscribe("entity_channel_" + this.ent_id);
    return channel.bind("new_data_event", function(wl) {
      return _this._swap_wl(wl);
    });
  };

  LiveEntity.prototype._do_action = function(action) {
    var _this = this;
    return Weblist.EntityRemote.do_action(this.ent_id, action).done(function(wl) {
      return _this._swap_wl(wl);
    });
  };

  LiveEntity.prototype.set = function(key, data_item) {
    return this._do_action({
      verb: "assoc",
      args: [this._get_keys(key), data_item]
    });
  };

  LiveEntity.prototype["delete"] = function(key) {
    return this._do_action({
      verb: "remove",
      args: [this._get_keys(key)]
    });
  };

  LiveEntity.prototype.add = function(data_item) {
    return this.insert_at(-1, data_item);
  };

  LiveEntity.prototype.insert_at = function(key, data_item) {
    return this._do_action({
      verb: "add",
      args: [this._get_keys(key), data_item]
    }, this);
  };

  LiveEntity.prototype.move_to = function(key, new_key) {
    return this._do_action({
      verb: "move",
      args: [this._get_keys(key), new_key]
    }, this);
  };

  LiveEntity.prototype.get = function(key) {
    return Weblist.DataOp.deep_clone(this.wl != null ? this.wl.data[key] : this.opt_value()[key]);
  };

  LiveEntity.prototype.opt_value = function() {
    return this.wl.data;
  };

  LiveEntity.prototype.changed = function(func) {
    return this.change_listeners.push(func);
  };

  LiveEntity.prototype._get_keys = function(keys) {
    if (keys instanceof Array) {
      return keys;
    } else {
      return [keys];
    }
  };

  LiveEntity.prototype._trigger_change = function(wl) {
    var l, _i, _len, _ref, _results;
    _ref = this.change_listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      _results.push(l(wl.data, wl));
    }
    return _results;
  };

  LiveEntity.prototype._swap_wl = function(wl) {
    if ((this.wl == null) || this.wl._id !== wl._id) {
      this.wl = wl;
      return this._trigger_change(wl);
    }
  };

  return LiveEntity;

})();
