{"name":"Leaves-client","tagline":"This is an experimental client for a immutable JSON document service","body":"### The Leaves Javascript Client\r\n\r\n> Leaves is exploratory and pre alpha.\r\n\r\nThis is the client for Leaves an experiental immutable JSON document\r\nservice.  The primary feature of this service is immutability.  You\r\ncan only _store_ and _read_ documents. You can not update them. \r\n\r\nYou *can* however operate on the documents but each operation creates\r\na new document.\r\n\r\nThis is a javascript client intended to connect to a Leaves.io service\r\nor one which implements the same api.\r\n\r\n### Quickstart\r\n\r\nTo get started clone or download this repository and copy the\r\n`leaves.js` or `leaves-min.js` from the `public/leaves-compressed/`\r\ndirectory to your web project. You will also need to copy the\r\n`public/js/vendor/cookies.js` file as well. [Or get it here.](//github.com/ScottHamper/Cookies)\r\n\r\nThen link to it in the head of your HTML document or template:\r\n\r\n```html\r\n<html>\r\n  <head>\r\n    <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js\"></script>\r\n    <script src=\"//your-public-javascripts-dir/cookies.js\"></script>\r\n    <script src=\"//your-public-javascripts-dir/leaves-min.js\"></script>\r\n  </head>\r\n```\r\n\r\nThe easiest integration route is to create a json document as follows:\r\n\r\n```javascript\r\nYourApp = YourApp || {};\r\n\r\nYourApp.todos_json = Leaves.DocManager.from_cookie('org.example.todos_app.todos_list',\r\n                                                   { todos_list: [] });\r\n```\r\n\r\nThis creates a new JSON document on the scratch.leaves.io web\r\nservice or fetches an existing one if there is already a cookie set\r\nfor this client.\r\n\r\nNow that you have a todos list document you can operate on it.\r\n\r\n*Adding* to the end of an array:\r\n```javascript\r\nYourApp.todos_json.add(['todos_list'], { content: \"buy milk\" });\r\n// -> { todos_list: [ { content: \"buy milk\" } ] }\r\n\r\nYourApp.todos_json.add(['todos_list'], { content: \"copy car key\" });\r\n// -> { todos_list: [ { content: \"buy milk\" }, { content: \"copy car key\" } ] }\r\n```\r\n\r\nThe first argument to `add` is a path to the node in the JSON document\r\nthat you want to add something to. In this case `['todos_list']` is a\r\npath to the todos_list array in this document.\r\n\r\nThis data is now stored on the service.  If you want to track when\r\nchanges are made to the document simply attach a listener:\r\n\r\n```javascript\r\nYourApp.todos_json.changed( function(json_document) { \r\n  // do something awesome with the data\r\n} );\r\n```\r\n\r\n### Document Paths\r\n\r\nMost operations take a document path.  A document path is simply an\r\narray describing the path to an item in the document. Given the\r\nfollowing document:\r\n\r\n```javascript\r\n{ moves_so_far: [2, 5], \r\n  players: [ { name: \"Bonnie\", plays_as: \"X\" }, \r\n             { name: \"Clyde\", plays_as: \"O\" } ] }\r\n```\r\n\r\nThese document paths refer to the following values:\r\n\r\n```javascript\r\n[\"moves_so_far\"]           -> [2, 5] \r\n[\"moves_so_far\", 0]        -> 2 \r\n[\"moves_so_far\", 1]        -> 5 \r\n[\"players\", 0, \"name\"]     -> \"Bonnie\" \r\n[\"players\", 1, \"plays_as\"] -> \"O\"\r\n[\"players\", 1]             -> { name: \"Bonnie\", plays_as: \"X\" }\r\n[\"players\"]                -> [ { name: \"Bonnie\", plays_as: \"X\" }, \r\n                                { name: \"Clyde\", plays_as: \"O\" } ]\r\n[] -> { moves_so_far: [2, 5], \r\n        players: [ { name: \"Bonnie\", plays_as: \"X\" },         \r\n                   { name: \"Clyde\", plays_as: \"O\" } ] }\r\n```\r\n\r\n### Operations\r\n\r\nThe following is a whirlwind tour of the available operations. All of\r\nthe following operations are cumulative and based on an initial\r\ndocument: `{ moves_so_far: []}`\r\n\r\n#### Creating the document\r\n\r\n```javascript\r\nTTT.game_data = Leaves.DocManager.from_data({ moves_so_far: [] });\r\n\r\n/// or with cookie storage\r\nTTT.game_data = Leaves.DocManager.from_cookie('tic_tac_toe', { moves_so_far: [] });\r\n```\r\n\r\n#### Setting a key on the document\r\n\r\n```javascript\r\nTTT.game_data.set(['players'], []);\r\n//-> { moves_so_far: [], players: [] }\r\n\r\nTTT.game_data.set(['players', 0], { name: \"Greg\" });\r\n//-> { moves_so_far: [], players: [ {name: \"Greg\"} ] }\r\n\r\nTTT.game_data.set(['players', 0, 'plays_as'], \"X\");\r\n//-> { moves_so_far: [], players: [ { name: \"Greg\", plays_as: \"X\" } ] }\r\n```\r\n\r\n#### Adding an element to an array\r\n\r\n```javascript\r\nTTT.game_data.add(['players'], { name: \"Bob\", plays_as: \"O\" });\r\n// -> { moves_so_far: [], \r\n//      players: [ { name: \"Bonnie\", plays_as: \"X\" }, \r\n//                 { name: \"Clyde\", plays_as: \"O\" } ] }\r\n\r\nTTT.game_data.add(['moves_so_far'], 2);\r\n// -> { moves_so_far: [2], \r\n//      players: [ { name: \"Bonnie\", plays_as: \"X\" }, \r\n//                 { name: \"Clyde\", plays_as: \"O\" } ] }\r\n\r\nTTT.game_data.add(['moves_so_far'], 5);\r\n// -> { moves_so_far: [2, 5], \r\n//      players: [ { name: \"Bonnie\", plays_as: \"X\" }, \r\n//                 { name: \"Clyde\", plays_as: \"O\" } ] }\r\n```\r\n\r\n#### Deleting things from maps and arrays\r\n\r\n```javascript\r\nTTT.game_data.delete(['players']);\r\n// -> { moves_so_far: [2, 5] }\r\n\r\nTTT.game_data.delete(['moves_so_far', 1]);\r\n// -> { moves_so_far: [2] }\r\n```\r\n\r\n#### Inserting things into an array\r\n```javascript\r\nTTT.game_data.insert_at(['moves_so_far', 1], 8);\r\n// -> { moves_so_far: [2, 8] }\r\n\r\nTTT.game_data.insert_at(['moves_so_far', 0], 6);\r\n// -> { moves_so_far: [6, 2, 8] }\r\n```\r\n\r\n#### Moving elements in an array\r\n```javascript\r\nTTT.game_data.move_to(['moves_so_far', 0], 2);\r\n// -> { moves_so_far: [2, 8, 6] }\r\n\r\nTTT.game_data.move_to(['moves_so_far', 1], 2);\r\n// -> { moves_so_far: [2, 6, 8] }\r\n```\r\n\r\n### Examining the current state of things\r\n\r\n#### Getting the state of an value at a path\r\n\r\n```javascript\r\nTTT.game_data.get([\"moves_so_far\", 0])\r\n// returns 2\r\n```\r\n\r\n#### Getting the optimistic value of the current document\r\n\r\nThe optimistic value of the current document is the value it should\r\nhold if all pending operations are successfully saved to the server.\r\n\r\n```javascript\r\nTTT.game_data.opt_value();\r\n// returns { moves_so_far: [2, 6, 8] }\r\n```\r\n\r\n#### Getting the actual snapshot value of the document in this moment\r\n\r\n```javascript\r\nTTT.game_data.value(function (snapshot_doc) { \r\n  console.log(snapshot_doc);\r\n});\r\n// console output: { moves_so_far: [2, 6, 8] }\r\n```\r\n\r\n#### Listening for changes\r\n\r\nthere are two different change listeners right now.  One for\r\noptimistic changes and one for actual server confirmed changes.\r\n\r\nListening for server confirmed changes:\r\n\r\n```javascript\r\nTTT.game_data.changed(function (snapshot_doc) { \r\n  console.log(snapshot_doc);\r\n});\r\n\r\nTTT.game_data.add([\"moves_so_far\"], 7)\r\n\r\n// console output: { moves_so_far: [2, 6, 8, 7] }\r\n```\r\n\r\nThe optimistic change event get triggered immediatly after an\r\noperation and will be triggered with a rolled back document if an\r\nerror occurs in the queue of pending operations.\r\n\r\nListening for optimistic changes:\r\n\r\n```javascript\r\nTTT.game_data.opt_changed(function (snapshot_doc) { \r\n  console.log(snapshot_doc);\r\n});\r\n\r\nTTT.game_data.add([\"moves_so_far\"], 3)\r\n\r\n// console output: { moves_so_far: [2, 6, 8, 7, 3] }\r\n```\r\n\r\n### Undo and redo\r\n\r\nOne of the real benefits of this service is that if you need to undo\r\nsomething it is both simple and robust.\r\n\r\n```javascript\r\n// This will trigger all changed and opt_changed listeners with the\r\n// reverted document value.\r\nTTT.game_data.undo();\r\n\r\n// current document: { moves_so_far: [2, 6, 8, 7] }\r\n```\r\n\r\nRedo is just as simple:\r\n\r\n```javascript\r\n// This will trigger all changed and opt_changed listeners with the\r\n// reverted document value.\r\nTTT.game_data.redo();\r\n\r\n// current document: { moves_so_far: [2, 6, 8, 7, 3] }\r\n```\r\n\r\nRedo is a much more transient operation.  Redo data is only recorded\r\nin local memory when you call undo and is only available until you\r\nmake a `add, set, insert_at, move_to` or `delete` operation.  When a\r\ndata changing operation occurs all redo information is erased.\r\n\r\n```javascript\r\n// This will trigger all changed and opt_changed listeners with the\r\n// reverted document value.\r\nTTT.game_data.undo();\r\nTTT.game_data.undo();\r\nTTT.game_data.undo();\r\nTTT.game_data.undo();\r\n// current document: { moves_so_far: [2] }\r\n\r\nTTT.game_data.redo();\r\n// current document: { moves_so_far: [2, 6] }\r\n\r\nTTT.game_data.add([\"moves_so_far\"], 3);\r\n// current document: { moves_so_far: [2, 6, 3] }\r\n\r\n// nothing happens if you redo now\r\nTTT.game_data.redo();\r\n// current document: { moves_so_far: [2, 6, 3] }\r\n```\r\n\r\n## Example Applications\r\n\r\nYou will find the source code for a couple of example applications in\r\n`src/example_apps`.\r\n\r\nThe HTML pages to hold these applications is located in\r\n`public/example_apps`.  To run these example applications make sure\r\nyou have `ruby` installed and do the following:\r\n\r\n```bash\r\ncd leaves-client\r\nbundle install\r\n\r\nrake server\r\n```\r\n\r\nYou should now be able to open your browser and navigate to\r\n`localhost:9292` and see an example application.\r\n\r\n#### Running tests \r\n\r\nMake sure you have the web server running and navigate to\r\n`localhost:9292/test`.\r\n\r\n#### Building \r\n\r\nTake a look at the Rakefile to get an idea of how to build the\r\nproject.  Working on this project requires nodejs for coffescript and\r\nruby for the build tools and JS minification.\r\n\r\nThe following rake commands are available:\r\n\r\n```bash\r\n-> rake -T\r\n\r\nrake           # compile all src .coffee files into the public/leaves dir\r\nrake watch     # watch and compile changed src files\r\nrake server    # Start server for example apps on port 9292\r\n\r\nrake clean     # remove compiled and compressed files from public dir\r\nrake compress  # Compress the compiled files to the public/leaves-compressed dir\r\n```\r\n\r\n\r\n","google":"UA-368586-6","note":"Don't delete this file! It's used internally to help with page regeneration."}